<?php

/**
 * @file
 * Contains core_search_facets.module.
 */

use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\facets\FacetSourceInterface;

/**
 * Implements hook_query_TAG_alter().
 *
 * Tag search_$type with $type node_search.
 */
function core_search_facets_query_search_node_search_alter(AlterableInterface $query) {
  // Obtain the Facet Source id for the current search.
  $request = \Drupal::requestStack()->getMasterRequest();
  $search_page = $request->attributes->get('entity');

  /** @var \Drupal\facets\FacetManager\DefaultFacetManager $facet_manager */
  $facet_manager = \Drupal::service('facets.manager');
  $facetsource_id = 'core_node_search:' . $search_page->id();

  // Add the active filters.
  $facet_manager->alterQuery($query, $facetsource_id);

}

/**
 * Implements hook_search_plugin_alter().
 *
 * Alter search plugin definitions.
 */
function core_search_facets_search_plugin_alter(array &$definitions) {
  // Replace the Search Plugin class to alter the search form adding the
  // possibility to show or hide the Content Type and Language advanced filters.
  if (isset($definitions['node_search'])) {
    $definitions['node_search']['class'] = 'Drupal\core_search_facets\Plugin\Search\NodeSearchFacets';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Edits the facet_source_edit_form, so we can add a checkbox to show or hide
 * some advanced filters for the core search.
 */
function core_search_facets_form_facet_source_edit_form_alter(&$form, FormStateInterface $form_state) {
  $request = \Drupal::requestStack()->getMasterRequest();
  $facet_source_id = str_replace(":", "__", $request->attributes->get('facets_facet_source'));
  if (strpos($facet_source_id, 'core_node_search') !== FALSE) {
    $form['advanced_filters'] = [
      '#type' => 'checkbox',
      '#title' => t('Show Advanced Filters.'),
      '#default_value' => \Drupal::config("facets.facet_source.{$facet_source_id}")->get('third_party_settings.core_search_facets.advanced_filters'),
    ];
    $form['#entity_builders'][] = 'core_search_facets_facet_source_form_form_builder';
  }
}

/**
 * Entity builder for the facet source form edit form with third party options.
 *
 * @see core_search_facets_form_facet_source_edit_form_alter()
 */
function core_search_facets_facet_source_form_form_builder($entity_type, FacetSourceInterface $facet_source, &$form, FormStateInterface $form_state) {
  $facet_source->setThirdPartySetting('core_search_facets', 'advanced_filters', $form_state->getValue('advanced_filters'));
}

/**
 * Implements hook_facets_core_allowed_field_types().
 */
function core_search_facets_facets_core_allowed_field_types(array $allowed_field_types) {
  $allowed_field_types[] = 'taxonomy_term';
  $allowed_field_types[] = 'integer';

  return $allowed_field_types;
}
